openapi: 3.0.3
info:
  title: Library API
  version: 1.5.0
  description: STD22079

servers:
  - url: https://library.com

tags:
  - name: Books
    description: Concerns books
  - name: Authors
    description: Concerns authors
  - name: Topics
    description: Concerns topics

paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Retrieve a list of books, optionally filtered and paginated.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter books by name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: Minimum release date. Ignored if `releaseDateMax` is not provided. Must not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: Maximum release date. Ignored if `releaseDateMin` is not provided. Must not be before `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: page
          description: "Page number for pagination. Used as 1 by default if no value is provided."
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: "Number of items per page. Used as 50 by default if no value is provided."
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: List of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

    put:
      tags:
        - Books
      summary: Create or update a list of books
      description: Create or update a list of books.
      operationId: crupdateBooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          description: List of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/{bookId}:
    delete:
      tags:
        - Books
      summary: Delete a Book
      description: Delete a book by its ID.
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Delete successful

  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Modify Author of Books
      description: Modify the author of a specific book.
      operationId: modifyAuthorOfBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author successfully modified in the book
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/authors:
    put:
      tags:
        - Books
      summary: Modify Authors of Books
      description: Modify the authors of a list of books.
      operationId: modifyAuthorOfBookList
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Authors successfully modified in the list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Retrieve a list of authors, optionally filtered and paginated.
      operationId: getAuthors
      parameters:
        - name: authorName
          in: query
          description: Filter authors by name.
          required: false
          schema:
            type: string
        - in: query
          name: page
          description: "Page number for pagination. Used as 1 by default if no value is provided."
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: "Number of items per page. Used as 50 by default if no value is provided."
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: List of returned authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'

    put:
      tags:
        - Authors
      summary: Create or update an author
      description: Create or update an author.
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: List of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    delete:
      tags:
        - Authors
      summary: Delete multiple authors
      description: Delete multiple authors by providing a list of IDs.
      operationId: deleteMultipleAuthors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author/properties/id'
      responses:
        204:
          description: Deletion successful

  /authors/{authorId}:
    delete:
      tags:
        - Authors
      summary: Delete an Author
      description: Delete an author by its ID.
      operationId: deleteAuthor
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Delete successful

components:
  schemas:
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
      required:
        - "bookId"
        - "authorId"

    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date

    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          $ref: "#/components/schemas/Sex"

    Sex:
      type: string
      enum:
          - M
          - F

    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
      properties:
        author:
          $ref: "#/components/schemas/Author"
        topic:
          type: object
          properties:
            id:
              type: string
            topic:
              type: string
              enum:
                - ROMANCE
                - COMEDY
                - OTHER