openapi: 3.0.3
info:
  title: Library API
  version: 1.10.0
  description: |
    STD22028 
    STD22079

servers:
  - url: https://library.com

tags:
  - name: Books
    description: Book related endpoint
  - name: Authors
    description: Author related endpoint
  - name: Import
    description: Import related endpoint
  - name: Subscriber
    description: Subscriber related endpoint

paths:
  ###Books===
  /books/{status}:
    get:
      tags:
        - Books
      summary: Get books by availability status
      description: Retrieve a list of books based on their availability status.
      operationId: getBooksByStatus
      security:
        - Admin: [ borrow, return ]
      parameters:
        - name: status
          in: path
          description: The availability status of the books (available or borrowed).
          required: true
          schema:
            type: string
            enum: [ 'available', 'borrowed' ]
        - $ref: "#/components/parameters/queryPage"
        - $ref: "#/components/parameters/queryPageSize"
      responses:
        '200':
          $ref: '#/components/responses/OK200Book'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Retrieve a list of books, optionally filtered and paginated.
      operationId: getBooks
      security:
        - Anonymous: [ read:books, read:authors ]
      parameters:
        - in: query
          name: bookName
          description: Filter books by name
          required: false
          schema:
            type: string
        - in: query
          name: available
          description: Shows if a book is available
          schema:
            $ref: "#/components/schemas/BorrowStatus/properties/isAvailable"
          allowEmptyValue: true
        - in: query
          name: releaseDateMin
          description: Minimum release date. Ignored if `releaseDateMax` is not provided. Must not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: Maximum release date. Ignored if `releaseDateMin` is not provided. Must not be before `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - $ref: "#/components/parameters/queryPage"
        - $ref: "#/components/parameters/queryPageSize"
      responses:
        '200':
          $ref: '#/components/responses/OK200Book'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

    put:
      tags:
        - Books
      summary: Create or update a list of books
      description: Create or update a list of books.
      operationId: crupdateBooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        '200':
          $ref: '#/components/responses/OK200Book'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

    delete:
      tags:
        - Books
      summary: Delete multiple books
      description: Delete multiple books by providing a list of IDs.
      operationId: deleteMultipleBooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook/properties/id'
      responses:
        '200':
          $ref: '#/components/responses/OK200Book'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  /books/{bookId}:
    delete:
      tags:
        - Books
      summary: Delete a Book
      description: Delete a book by its ID.
      operationId: deleteBook
      security:
        - Anonymous: [ read:books, read:authors ]
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/OK200Book'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Modify Author of Books
      description: Modify the author of a specific book.
      operationId: modifyAuthorOfBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/OK200Book'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  /books/authors:
    put:
      tags:
        - Books
      summary: Modify Authors of Books
      description: Modify the authors of a list of books.
      operationId: modifyAuthorOfBookList
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        '200':
          $ref: '#/components/responses/OK200Book'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  ###Authors===
  /authors/page/{page}/pageSize/{pageSize}:
    get:
      tags:
        - Authors
      summary: Get all authors limited by page
      description: Retrieve a list of authors paginated.
      operationId: getAuthors
      parameters:
        - name: authorName
          in: query
          description: Filter authors by name.
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/pathPage"
        - $ref: "#/components/parameters/pathPageSize"
      responses:
        '200':
          $ref: '#/components/responses/OK200Author'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Retrieve a list of authors, optionally filtered and paginated.
      operationId: getAuthors
      security:
        - Anonymous: [ read:books, read:authors ]
      parameters:
        - name: authorName
          in: query
          description: Filter authors by name.
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/queryPage"
        - $ref: "#/components/parameters/queryPageSize"

      responses:
        '200':
          $ref: '#/components/responses/OK200Author'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

    put:
      tags:
        - Authors
      summary: Create or update an author
      description: Create or update an author.
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        '200':
          $ref: '#/components/responses/OK200Author'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

    delete:
      tags:
        - Authors
      summary: Delete multiple authors
      description: Delete multiple authors by providing a list of IDs.
      operationId: deleteMultipleAuthors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author/properties/id'
      responses:
        '200':
          $ref: '#/components/responses/OK200Author'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  /authors/{authorId}:
    delete:
      tags:
        - Authors
      summary: Delete an Author
      description: Delete an author by its ID.
      operationId: deleteAuthor
      security:
        - Anonymous: [ read:books, read:authors ]
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/OK200Author'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  ###Import===
  /authors/import:
    post:
      tags:
        - Import
      summary: Import authors
      description: Import a list of authors from a file.
      operationId: importAuthors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAuthor'
      responses:
        '200':
          $ref: '#/components/responses/OK200Author'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  /books/import:
    post:
      tags:
        - Import
      summary: Import books
      description: Import a list of books from a file.
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportBook'
      responses:
        '200':
          $ref: '#/components/responses/OK200Book'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  ###Subscriber
  /Subscriber:
    get:
      tags:
        - Subscriber
      summary: Get all subscriber
      description: Retrieve a list of subscriber, optionally filtered and paginated.
      operationId: getSubscriber
      parameters:
        - in: query
          name: subscriberId
          description: Filter subscriber by ID
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/queryPage"
        - $ref: "#/components/parameters/queryPageSize"
      responses:
        '200':
          $ref: '#/components/responses/OK200Subscriber'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

    put:
      tags:
        - Subscriber
      summary: Create or update a list of subscriber
      description: Create or update a list of subscriber.
      operationId: crupdateSubscriber
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Subscriber'
      responses:
        '200':
          $ref: '#/components/responses/OK200Subscriber'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

    delete:
      tags:
        - Subscriber
      summary: Delete multiple subscriber
      description: Delete multiple subscriber by providing a list of IDs.
      operationId: deleteMultipleSubscriber
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Subscriber/properties/id'
      responses:
        '200':
          $ref: '#/components/responses/OK200Subscriber'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  /Subscriber/{SubscriberId}:
    delete:
      tags:
        - Subscriber
      summary: Delete a Subscriber
      description: Delete a Subscriber by its ID.
      operationId: deleteSubscriber
      parameters:
        - name: subscriberId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/OK200Subscriber'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  /subscriber/{subscriberId}/books/{bookId}/{action}:
    post:
      tags:
        - Subscriber
      summary: Borrow or return a book
      description: Borrow or return a book for a subscriber.
      operationId: borrowOrReturnBook
      parameters:
        - name: subscriberId
          in: path
          required: true
          schema:
            type: string
        - name: bookId
          in: path
          required: true
          schema:
            type: string
        - name: action
          in: path
          required: true
          schema:
            type: string
            enum: [ 'borrow', 'return' ]
      responses:
        '200':
          $ref: '#/components/responses/OK200Subscriber'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  /subscriber/{subscriberId}/activity:
    get:
      tags:
        - Subscriber
      summary: Get a subscriber's activity
      description: Retrieve a subscriber's borrow and return activities within a specified date range.
      operationId: getSubscriberActivity
      parameters:
        - name: subscriberId
          in: path
          required: true
          schema:
            type: string
        - name: startDate
          in: query
          description: Start date of the activity range
          required: true
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: End date of the activity range
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          $ref: '#/components/responses/OK200SubscriberActivity'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  /subscriber/{subscriberId}/borrowedBooks:
    get:
      tags:
        - Subscriber
      summary: Get a subscribers' borrowed books
      description: Retrieve a list of books borrowed by a subscriber.
      operationId: getSubscriberBorrowedBooks
      parameters:
        - name: subscriberId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/OK200Book'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

components:
  responses:
    OK200Author:
      description: The request has succeeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponseAuthor'

    OK200Book:
      description: The request has succeeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponseBook'

    OK200Subscriber:
      description: The request has succeeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponseSubscriber'

    OK200SubscriberActivity:
      description: The request has succeeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponseSubscriber'

    BadRequest400:
      description: The server cannot process the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status:
              code: 400
              message: "Bad request"
            body:
              error: "Invalid input data"

    Forbidden403:
      description: The server refused the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status:
              code: 403
              message: "Forbidden"
            body:
              error: "Access denied"

    InternalServerError500:
      description: The server encountered an unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status:
              code: 500
              message: "Internal server error"
            body:
              error: "An unexpected error occurred on the server"

  parameters:
    queryPage:
      name: page
      in: query
      required: false
      schema:
        description: "Page number for pagination. Used as 1 by default if no value is provided."
        type: integer
        default: 1

    queryPageSize:
      name: pageSize
      in: query
      required: false
      schema:
        description: "Number of items per page. Used as 50 by default if no value is provided."
        type: integer
        default: 50

    pathPage:
      name: page
      in: path
      required: true
      schema:
        description: "Page number for pagination. Used as 1 by default if no value is provided."
        type: integer
        default: 1

    pathPageSize:
      name: pageSize
      in: path
      required: true
      schema:
        description: "Number of items per page. Used as 50 by default if no value is provided."
        type: integer
        default: 50

  schemas:
    Response:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
              example: 200
            message:
              type: string
              example: "The request has succeeded"
        body:
          type: object

    SuccessResponseAuthor:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Author'

    SuccessResponseBook:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Book'

    SuccessResponseSubscriber:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Subscriber'

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            body:
              type: object
              properties:
                error:
                  type: string

    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
      required:
        - "bookId"
        - "authorId"

    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date
    
    BookNoID:
      type: object
      allOf:
        - $ref: "#/components/schemas/Book"
        - type: object
          properties:
            id:
              type: string
              readOnly: true
            topic:
              type: string
              readOnly: true
            idAuthor:
              $ref: "#/components/schemas/Author/properties/id"

    AuthorNoID:
      type: object
      allOf:
        - $ref: "#/components/schemas/Author"
        - type: object
          properties:
            id:
              type: string
              readOnly: true

    ImportBook:
      oneOf:
        - type: array
          items:
            $ref: "#/components/schemas/BookNoID"
        - type: string
          format: binary
          description: Should be the result from an excel file
      discriminator:
        propertyName: importType
        mapping:
          excel: '#/components/schemas/ImportExcel'
          json: '#/components/schemas/ImportJSON'

    ImportExcel:
      type: string
      format: binary
      description: Imported excel file

    ImportJSON:
      type: array
      items:
        oneOf:
          - allOf:
              - $ref: "#/components/schemas/BookNoID"
              - type: object
          - allOf:
              - $ref: "#/components/schemas/AuthorNoID"
              - type: object

    ImportAuthor:
      oneOf:
        - type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Author"
              - type: object
                properties:
                  id:
                    type: string
                    readOnly: true
        - type: string
          format: binary
          description: Should be the result from an excel file
      discriminator:
        propertyName: importType
        mapping:
          excel: '#/components/schemas/ImportExcel'
          json: '#/components/schemas/ImportJSON'

    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          $ref: "#/components/schemas/Sex"

    Sex:
      type: string
      enum:
        - M
        - F

    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
      properties:
        author:
          $ref: "#/components/schemas/Author"
        topic:
          type: object
          properties:
            id:
              type: string
            topic:
              type: string
              enum:
                - ROMANCE
                - COMEDY
                - OTHER
        borrowStatus:
          $ref: "#/components/schemas/BorrowStatus"

    Subscriber:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string
    
    SubscriberInfo:
      allOf:
        - $ref: "#/components/schemas/Subscriber"
        - $ref: "#/components/schemas/Checkout"

    Checkout:
      type: object
      properties:
        id:
          type: string
        bookId:
          type: array
          items:
            $ref: '#/components/schemas/CrupdateBook/properties/id'
        checkoutDate:
          type: string
          format: date-time
        returnDate:
          type: string
          format: date-time

    BorrowStatus:
      type: object
      properties:
        id:
          type: string
        isAvailable:
          type: boolean
          default: true
        borrowedBy:
          $ref: "#/components/schemas/Subscriber"
        lastBorrowDate:
          type: string
          format: date-time

  securitySchemes:
    Anonymous:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'your_authorization_url'
          scopes:
            read:books: Read access to books
            read:authors: Read access to authors
    Admin:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'your_authorization_url'
          scopes:
            borrow: Borrow access
            return: Return access
# 2.b.i.L'objet UpdateBookAuthor ne contient que les identifiants CrupdateBook et Author car son objectif premier est de relier un livre à un auteur. 
# Les identifiants suffisent à établir ce lien, et l'ajout de propriétés supplémentaires telles que bookName et authorName ne modifierait pas le lien entre le livre et l'auteur.              

# 2.b.ii. L'objet 'UpdateBookAuthor' doit avoir des propriétés de 'CrupdateBook' et 'Author' lorsque vous voulez mettre à jour le nom du livre, les numéros de page ou le sujet en même temps que vous changez l'auteur. 
# Cela peut être utile dans un scénario où les détails d'un livre sont mis à jour et où l'auteur est modifié dans le cadre de la même opération.

# 3.a Performance : Lorsqu'il y a une grande quantité de données, le fait de les charger toutes en même temps peut être lent et consommer beaucoup de ressources. 
# Facilité d'utilisation : La pagination permet aux utilisateurs de naviguer plus facilement dans de grands ensembles de données.