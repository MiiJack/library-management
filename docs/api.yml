openapi: 3.0.3
info:
  title: Library API
  version: 1.2.1
  description: STD22079
servers:
  - url: https://library.com
tags:
  - name: Books
    description: Concerns books
  - name: Authors
    description: Concerns authors
  - name: Topics 
    description: Concerns topics
paths:
  /books:
    get:
      tags:
      - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
      - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    delete:
      tags:
      - Books
      summary: Deletes a Book
      description: Deletes a book by Id
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Delete successful
  /books/{bookId}/authors/{authorId}:
    put:
      tags: 
      - Books
      operationId: modifyAuthorOfBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author successfully modified in the book
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/authors:
    put:
      tags:
      - Books
      operationId: modifyAuthorOfBookList
      requestBody:
        content: 
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Authors successfully modified in the list of book
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/topics:
    put:
      tags: 
      - Books
      - Topics
      operationId: modifyListOfTopicsInABook
      requestBody:
        content: 
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookTopic'
      responses:
        200:
          description: topics successfully modified in the list of book
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /topics:
    get:
      tags:
      - Topics
      summary: Get all topics
      description: The returned topics are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
    put:
      tags:
      - Topics
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Topic'
      responses:
        200:
          description: The list of created or updated topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
    delete:
      tags:
      - Topics
      summary: Deletes a Topic
      description: Deletes a Topic by Id
      operationId: deleteTopic
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Delete successful
  /authors:
    get:
      tags:
      - Authors
      summary: Gets all authors
      description: Returns a list of all authors ordered by their name ascending
      operationId: getAuthors
      parameters:
        - name: authorName
          in: query
          description: Filters by given author name
          required: false
          schema:
            type: string
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of returned author/s
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      tags:
      - Authors
      summary: Create or update an author
      operationId: updateAuthor
      requestBody:
        content: 
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated author
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    delete:
      tags:
      - Authors
      summary: Deletes an Author
      description: Deletes an author by Id
      operationId: deleteAuthor
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Delete successful
components:
  schemas:
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
      required:
        - "bookId"
        - "authorId"
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: string
        topic:
          $ref: "#/components/schemas/Topic"
        releaseDate:
          type: string
          format: date
    UpdateBookTopic:
      type: object
      properties:
        bookId:
          type: string
        topicId:
          type: string
    Topic:
      type: object
      properties:
        id: 
          type: string
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    Book:
      type: object
      properties:
        allOf:
          $ref: "#/components/schemas/CrupdateBook"
        author:
          $ref: "#/components/schemas/Author"