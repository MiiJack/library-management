openapi: 3.0.3
info:
  title: Library API
  version: 1.7.0
  description: STD22079

servers:
  - url: https://library.com

tags:
  - name: Books
    description: Book related endpoint
  - name: Authors
    description: Author related endpoint

paths:
###Books===
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Retrieve a list of books, optionally filtered and paginated.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter books by name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: Minimum release date. Ignored if `releaseDateMax` is not provided. Must not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: Maximum release date. Ignored if `releaseDateMin` is not provided. Must not be before `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - $ref: "#/components/parameters/queryPagination"
      responses:
       '200':
         $ref: '#/components/responses/OK200'
       '400':
         $ref: '#/components/responses/BadRequest400'
       '403':
         $ref: '#/components/responses/Forbidden403'
       '500':
         $ref: '#/components/responses/InternalServerError500'

    put:
      tags:
        - Books
      summary: Create or update a list of books
      description: Create or update a list of books.
      operationId: crupdateBooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
       '200':
         $ref: '#/components/responses/OK200'
       '400':
         $ref: '#/components/responses/BadRequest400'
       '403':
         $ref: '#/components/responses/Forbidden403'
       '500':
         $ref: '#/components/responses/InternalServerError500'

    delete:
      tags:
        - Books
      summary: Delete multiple books
      description: Delete multiple books by providing a list of IDs.
      operationId: deleteMultipleBooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook/properties/id'
      responses:
       '200':
         $ref: '#/components/responses/OK200'
       '400':
         $ref: '#/components/responses/BadRequest400'
       '403':
         $ref: '#/components/responses/Forbidden403'
       '500':
         $ref: '#/components/responses/InternalServerError500'

  /books/{bookId}:
    delete:
      tags:
        - Books
      summary: Delete a Book
      description: Delete a book by its ID.
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
      responses:
       '200':
         $ref: '#/components/responses/OK200'
       '400':
         $ref: '#/components/responses/BadRequest400'
       '403':
         $ref: '#/components/responses/Forbidden403'
       '500':
         $ref: '#/components/responses/InternalServerError500'

  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Modify Author of Books
      description: Modify the author of a specific book.
      operationId: modifyAuthorOfBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
       '200':
         $ref: '#/components/responses/OK200'
       '400':
         $ref: '#/components/responses/BadRequest400'
       '403':
         $ref: '#/components/responses/Forbidden403'
       '500':
         $ref: '#/components/responses/InternalServerError500'

  /books/authors:
    put:
      tags:
        - Books
      summary: Modify Authors of Books
      description: Modify the authors of a list of books.
      operationId: modifyAuthorOfBookList
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
       '200':
         $ref: '#/components/responses/OK200'
       '400':
         $ref: '#/components/responses/BadRequest400'
       '403':
         $ref: '#/components/responses/Forbidden403'
       '500':
         $ref: '#/components/responses/InternalServerError500'

###Authors===
  /authors/page/{page}/pageSize/{pageSize}:
    get:
      tags:
        - Authors
      summary: Get all authors limited by page
      description: Retrieve a list of authors paginated.
      operationId: getAuthors
      parameters:
        - name: authorName
          in: query
          description: Filter authors by name.
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/pathPagination"
      responses:
       '200':
         $ref: '#/components/responses/OK200'
       '400':
         $ref: '#/components/responses/BadRequest400'
       '403':
         $ref: '#/components/responses/Forbidden403'
       '500':
         $ref: '#/components/responses/InternalServerError500'
                  
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Retrieve a list of authors, optionally filtered and paginated.
      operationId: getAuthors
      parameters:
        - name: authorName
          in: query
          description: Filter authors by name.
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/queryPagination"
      responses:
       '200':
         $ref: '#/components/responses/OK200'
       '400':
         $ref: '#/components/responses/BadRequest400'
       '403':
         $ref: '#/components/responses/Forbidden403'
       '500':
         $ref: '#/components/responses/InternalServerError500'

    put:
      tags:
        - Authors
      summary: Create or update an author
      description: Create or update an author.
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
       '200':
         $ref: '#/components/responses/OK200'
       '400':
         $ref: '#/components/responses/BadRequest400'
       '403':
         $ref: '#/components/responses/Forbidden403'
       '500':
         $ref: '#/components/responses/InternalServerError500'

    delete:
      tags:
        - Authors
      summary: Delete multiple authors
      description: Delete multiple authors by providing a list of IDs.
      operationId: deleteMultipleAuthors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author/properties/id'
      responses:
       '200':
         $ref: '#/components/responses/OK200'
       '400':
         $ref: '#/components/responses/BadRequest400'
       '403':
         $ref: '#/components/responses/Forbidden403'
       '500':
         $ref: '#/components/responses/InternalServerError500'

  /authors/{authorId}:
    delete:
      tags:
        - Authors
      summary: Delete an Author
      description: Delete an author by its ID.
      operationId: deleteAuthor
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
       '200':
         $ref: '#/components/responses/OK200'
       '400':
         $ref: '#/components/responses/BadRequest400'
       '403':
         $ref: '#/components/responses/Forbidden403'
       '500':
         $ref: '#/components/responses/InternalServerError500'

components:
  responses:
    OK200:
      description: The request has succeeded
      content: 
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'

    BadRequest400:
      description: The server cannot process the request
      content: 
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: 
            status: 
              code: 400
              message: "Bad request"
            body: 
              error: "Invalid input data"

    Forbidden403:
      description: The server refused the request
      content: 
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: 
            status: 
              code: 403
              message: "Forbidden"
            body: 
              error: "Access denied"
              
    InternalServerError500:
      description: The server encountered an unexpected error
      content: 
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: 
            status: 
              code: 500
              message: "Internal server error"
            body: 
              error: "An unexpected error occurred on the server"

  parameters:
    queryPagination:
      name: pagination
      in: query
      required: false
      schema:
        type: object
        properties:
          page:
            description: "Page number for pagination. Used as 1 by default if no value is provided."
            type: integer
            default: 1

          pageSize:
            description: "Number of items per page. Used as 50 by default if no value is provided."
            type: integer
            default: 50

    pathPagination:
      name: pagination
      in: path
      required: true
      schema:
        type: object
        properties:
          page:
            description: "Page number for pagination. Used as 1 by default if no value is provided."
            type: integer
            default: 1

          pageSize:
            description: "Number of items per page. Used as 50 by default if no value is provided."
            type: integer
            default: 50

  schemas:
    Response:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
              example: 200
            message:
              type: string
              example: "The request has succeeded"
        body:
          type: object

    SuccessResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            body:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/Book'
                  - $ref: '#/components/schemas/Author'

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            body:
              type: object
              properties:
                error:
                  type: string

    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
      required:
        - "bookId"
        - "authorId"

    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date

    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          $ref: "#/components/schemas/Sex"

    Sex:
      type: string
      enum:
          - M
          - F

    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
      properties:
        author:
          $ref: "#/components/schemas/Author"
        topic:
          type: object
          properties:
            id:
              type: string
            topic:
              type: string
              enum:
                - ROMANCE
                - COMEDY
                - OTHER

# 2.b.i.L'objet UpdateBookAuthor ne contient que les identifiants CrupdateBook et Author car son objectif premier est de relier un livre à un auteur. 
# Les identifiants suffisent à établir ce lien, et l'ajout de propriétés supplémentaires telles que bookName et authorName ne modifierait pas le lien entre le livre et l'auteur.              

# 2.b.ii. L'objet 'UpdateBookAuthor' doit avoir des propriétés de 'CrupdateBook' et 'Author' lorsque vous voulez mettre à jour le nom du livre, les numéros de page ou le sujet en même temps que vous changez l'auteur. 
# Cela peut être utile dans un scénario où les détails d'un livre sont mis à jour et où l'auteur est modifié dans le cadre de la même opération.

# 3.a Performance : Lorsqu'il y a une grande quantité de données, le fait de les charger toutes en même temps peut être lent et consommer beaucoup de ressources. 
# Facilité d'utilisation : La pagination permet aux utilisateurs de naviguer plus facilement dans de grands ensembles de données.